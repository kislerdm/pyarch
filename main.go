/*
	Application to map the pyreverse DSL to a webapp.

	Author: Dmitry Kisler, admin@dkisler.com
	License: MIT
*/

package main

import (
	"flag"
	"fmt"
	"log"
	"os"
)

func main() {
	if err := worker(cli()); err != nil {
		log.Fatal(err)
	}
}

func cli() (pathInput, pathOutput string) {
	const appName = "pyarch"
	flags := flag.NewFlagSet(appName, flag.ExitOnError)
	flags.StringVar(&pathInput, "input", "", "Path to the input file classes.puml")
	flags.StringVar(&pathOutput, "output", "", "Path to store output html file")
	flags.Usage = func() {
		fmt.Printf(
			`%s generates python UML generated by pyreverse DSL to a webapp with dynamic classDiagram.

Ref:
- https://www.bhavaniravi.com/python/generate-uml-diagrams-from-python-code
- https://mermaid.js.org/syntax/classDiagram.html

Usage example:

1. Generate python UML with pyreverse:
cd /PATH/TO/PYTHON/PACKAGE
pyreverse -Akmy --colorized --max-color-depth 10 -o puml .

2. Use this %s:

%s -input classes.dot -output index.html

Arguments:
`, appName, appName, appName,
		)
		flags.PrintDefaults()
	}

	if err := flags.Parse(os.Args[1:]); err != nil || flags.NFlag() < 2 {
		flags.Usage()
		os.Exit(1)
	}

	if pathInput == "" || pathOutput == "" {
		flags.Usage()
		os.Exit(1)
	}

	return
}

func worker(pathInput string, pathOutput string) error {
	fIn, err := os.Open(pathOutput)
	defer func() {
		_ = fIn.Close()
	}()
	if err != nil {
		return err
	}

	return nil
}
